0:00:00.000,0:00:01.860

0:00:01.860,0:00:04.450
DAN KLEIN: We're going to describe now
something called backtracking search.

0:00:04.450,0:00:08.350
Backtracking search is the basic
uninformed algorithm for solving CSPs,

0:00:08.350,0:00:10.080
and it basically takes two ideas.

0:00:10.080,0:00:14.000
The first idea is we should really only
assign one variable at a time.

0:00:14.000,0:00:16.580
So on the applet, we didn't
actually see this problem.

0:00:16.580,0:00:20.050
But in principle, from the empty
assignment, you've got a whole bunch

0:00:20.050,0:00:21.050
of successors.

0:00:21.050,0:00:24.080
There's a whole bunch of variables you
could assign next, and for each one,

0:00:24.080,0:00:26.480
you have a whole bunch of values
you could assign next.

0:00:26.480,0:00:29.710
So the first idea is know at any given
point, there should only be one

0:00:29.710,0:00:31.300
variable in play.

0:00:31.300,0:00:34.340
And of course, we're going to have to
consider all of its possible values.

0:00:34.340,0:00:37.270
So one variable at a time.

0:00:37.270,0:00:41.330
The second idea is we should really to
check these constraints as we go.

0:00:41.330,0:00:44.670
So for example, when we assign that
second blue value, we should

0:00:44.670,0:00:46.410
immediately know we've
done something wrong.

0:00:46.410,0:00:49.950
We should be checking our constraints
incrementally as we go.

0:00:49.950,0:00:53.040
And one way to say that is we should
only consider assigning values which

0:00:53.040,0:00:55.990
do not conflict with previous
assignments.

0:00:55.990,0:00:59.550
Now of course, in order to make sure
that the values we're assigning

0:00:59.550,0:01:02.400
haven't created a conflict, we might
have to do some computation.

0:01:02.400,0:01:04.550
But if you think about this, essentially
what we're doing is we're

0:01:04.550,0:01:06.790
doing our goal test incrementally.

0:01:06.790,0:01:09.430
In a standard search problem, the
goal test comes at the end.

0:01:09.430,0:01:13.480
If you don't pass the goal test, no
worries, maybe your successors will.

0:01:13.480,0:01:15.560
Here is CSPs we have
a stronger notion.

0:01:15.560,0:01:18.830
We have the notion of passing the goal
test at the end, but we also have the

0:01:18.830,0:01:22.100
notion of having screwed up so badly
that even though you've got

0:01:22.100,0:01:24.800
successors, they're not
going to work out.

0:01:24.800,0:01:28.540
OK, so we need the ability to just
bail as soon as we've violated a

0:01:28.540,0:01:29.260
constraint.

0:01:29.260,0:01:32.500
And it should be a fairly intuitive
thing to add, but it's not something

0:01:32.500,0:01:33.230
you have in search.

0:01:33.230,0:01:35.710
In search, the only notion
is the goal test.

0:01:35.710,0:01:38.650
Failing the goal test is not bad,
passing the goal test is good.

0:01:38.650,0:01:43.840
We need the ability to fail, and really
fail, and get kicked out.

0:01:43.840,0:01:46.040
OK, so backtracking search
incorporates two ideas.

0:01:46.040,0:01:49.030
The first one is assign one variable at
a time, and the second one is check

0:01:49.030,0:01:50.690
the constraints as you go.

0:01:50.690,0:01:53.640
Depth first search augmented with
these two ideas is called

0:01:53.640,0:01:54.980
backtracking search.

0:01:54.980,0:01:56.670
And you might think, why
do they call it that?

0:01:56.670,0:01:59.160
Isn't depth first search kind of
already a backtracking search?

0:01:59.160,0:01:59.810
Yes, yes.

0:01:59.810,0:02:00.980
That's what it's called.

0:02:00.980,0:02:01.870
OK.

0:02:01.870,0:02:04.760
If you put this stuff together, we
can solve n-queens for something

0:02:04.760,0:02:06.470
like n equals 25.

0:02:06.470,0:02:12.070
And if we go into our demo, let's take
a look at what this looks like.

0:02:12.070,0:02:14.410
So I'm going to change here the
algorithm from naive search to

0:02:14.410,0:02:16.130
backtracking.

0:02:16.130,0:02:18.625
And again, we start off
with the empty case.

0:02:18.625,0:02:22.020
If I click next, I'll assign blue,
and we'll move on to the

0:02:22.020,0:02:23.240
next one to the right.

0:02:23.240,0:02:24.220
What are we going to assign it?

0:02:24.220,0:02:26.590
Well, we're not going to do blue
because that already violates a

0:02:26.590,0:02:27.290
constraint.

0:02:27.290,0:02:29.990
So we're only going to consider
legal assignments.

0:02:29.990,0:02:31.790
And that means we assign red.

0:02:31.790,0:02:33.770
And then what do we assign next?

0:02:33.770,0:02:34.330
Blue.

0:02:34.330,0:02:35.400
Is that a good idea?

0:02:35.400,0:02:35.890
I don't know.

0:02:35.890,0:02:37.220
That's why we have CSP solvers.

0:02:37.220,0:02:38.370
So we keep going.

0:02:38.370,0:02:39.700
Red here.

0:02:39.700,0:02:43.060
We're smart enough to assign green, but
it's still not going to work out

0:02:43.060,0:02:45.770
because here, there won't
be any successors, and

0:02:45.770,0:02:46.980
we'll have to backtrack.

0:02:46.980,0:02:51.020
But if I click through it, we don't
do a lot of backtracking.

0:02:51.020,0:02:54.660
And eventually we just get to the end,
with a couple hiccups along the way.

0:02:54.660,0:02:58.810
All right, let's see
this in psuedocode.

0:02:58.810,0:03:00.610
So in pseudocode, it would
look something like this.

0:03:00.610,0:03:04.430
There would be some function called
backtracking search, and in fact, this

0:03:04.430,0:03:07.250
is typically implemented recursively.

0:03:07.250,0:03:08.400
So what do you do?

0:03:08.400,0:03:11.180
When you recurse, you check to see
whether your assignment is complete.

0:03:11.180,0:03:13.800
If so, you return it, because you don't
get a complete assignment unless

0:03:13.800,0:03:16.310
everything kind of passed the
constraints along the way.

0:03:16.310,0:03:20.370
So the goal test was smeared along the
entire computation to get here.

0:03:20.370,0:03:26.420
Then we select a variable, and we
consider each value in its domains in

0:03:26.420,0:03:27.910
some order.

0:03:27.910,0:03:30.940
And then we do this inner loop that says
if that value doesn't violate a

0:03:30.940,0:03:35.230
constraint, extend the partial
assignment in recurse.

0:03:35.230,0:03:36.530
OK, so simple enough.

0:03:36.530,0:03:37.310
That's backtracking.

0:03:37.310,0:03:40.360
It's depth first search, here
implemented recursively, plus this

0:03:40.360,0:03:42.960
notion that the variables
come in some order.

0:03:42.960,0:03:46.610
Plus this notion that as soon as you
violate a constraint, you fail.

0:03:46.610,0:03:48.600
And there are some choice points here.

0:03:48.600,0:03:52.070
And the choice points in particular, as
it's written here, are going to be

0:03:52.070,0:03:54.110
well, what order should I go
through the variables?

0:03:54.110,0:03:55.500
What order should I try to values?

0:03:55.500,0:03:57.090
These kinds of ideas are
going to help us make

0:03:57.090,0:03:58.470
backtracking search even better.

0:03:58.470,0:03:59.720

