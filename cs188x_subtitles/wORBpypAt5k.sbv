0:00:00.000,0:00:01.180

0:00:01.180,0:00:04.460
DAN KLEIN: One thing that we often do
is we draw the graph associated with

0:00:04.460,0:00:05.440
the problem.

0:00:05.440,0:00:07.690
And this is helpful in a lot of ways.

0:00:07.690,0:00:11.260
So for the case of a binary constraint
satisfaction problem where each

0:00:11.260,0:00:13.560
constraint connects at most
two variables, right?

0:00:13.560,0:00:15.300
We could have a constraint on
just a single variable.

0:00:15.300,0:00:17.200
It would be called a
unitary constraint.

0:00:17.200,0:00:19.970
This might be the graph for
the Australia case.

0:00:19.970,0:00:22.810
So in a binary constraint graph,
the nodes are the variables.

0:00:22.810,0:00:25.710
So you can see here, essentially
it mimics the structure of

0:00:25.710,0:00:27.350
the Australia graph.

0:00:27.350,0:00:30.250
And arcs indicate the presence
of a constraint.

0:00:30.250,0:00:32.299
Notice that they don't say
what the constraint is.

0:00:32.299,0:00:36.370
In particular, the constraint here
between WA and NT was an inequality

0:00:36.370,0:00:37.590
constraint.

0:00:37.590,0:00:39.280
But the graph doesn't show that.

0:00:39.280,0:00:41.900
It just shows that there
is a constraint.

0:00:41.900,0:00:45.080
Why do we want graphs like this if
they don't actually encode which

0:00:45.080,0:00:46.190
constraint is there?

0:00:46.190,0:00:48.810
And that's because a lot of general
purpose algorithms will use the graph

0:00:48.810,0:00:50.270
structure to speed things up.

0:00:50.270,0:00:53.150
For example, we could recognize that
Tasmania is disconnected from the

0:00:53.150,0:00:56.050
graph, and solve it independently,
which is really easy.

0:00:56.050,0:00:59.750
We'll see other algorithms next
lecture that also exploit the

0:00:59.750,0:01:03.040
structure of the constraint
graph to speed things up.

0:01:03.040,0:01:05.290
Let's take a look at N Queens.

0:01:05.290,0:01:09.410
So here is the five Queens problem.

0:01:09.410,0:01:12.110
Drawn gloriously by myself.

0:01:12.110,0:01:13.320
So here's five Queens.

0:01:13.320,0:01:15.290
A, B, C, D, and E are the rows.

0:01:15.290,0:01:17.370
1, 2, 3, 4, 5 are the columns.

0:01:17.370,0:01:22.320
And now drawn in this wonderful
applet by AI Space is the

0:01:22.320,0:01:23.580
variables in circles.

0:01:23.580,0:01:26.320
And you can see their
domains below them.

0:01:26.320,0:01:28.500
And every one of these
arcs is a constraint.

0:01:28.500,0:01:31.430
So for example, A and B, the
first two rows have some

0:01:31.430,0:01:32.830
constraint between them.

0:01:32.830,0:01:35.250
And in this particular output,
it's called Queens 1.

0:01:35.250,0:01:36.970
What the heck is the Queens
1 constraint?

0:01:36.970,0:01:39.870
Well, it says things like they can't
both be 1, and they can't be A is 1,

0:01:39.870,0:01:40.950
and B is 2, and so on.

0:01:40.950,0:01:44.330
That's all living inside this constraint
here called Queens 1.

0:01:44.330,0:01:45.800
OK, we'll come back to this.

0:01:45.800,0:01:47.050

